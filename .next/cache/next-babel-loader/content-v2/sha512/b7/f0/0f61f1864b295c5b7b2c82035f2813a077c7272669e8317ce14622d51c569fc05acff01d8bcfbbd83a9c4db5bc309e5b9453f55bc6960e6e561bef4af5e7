{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/tom/Documents/Projects/moveit-next/src/contexts/ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nimport challenges from \"../../challenges.json\";\nimport { LevelUpModal } from \"../components/LevelUpModal\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false);\n  const experinceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set(\"level\", String(level));\n    Cookies.set(\"currentExperience\", String(currentExperience));\n    Cookies.set(\"challengesCompleted\", String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n    console.log(isLevelUpModalOpen);\n    setIsLevelUpModalOpen(true);\n    console.log(isLevelUpModalOpen);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio(\"/notification.mp3\").play();\n\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Novo desafio o/\", {\n        body: `Valendo ${challenge.amount} xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experinceToNextLevel) {\n      finalExperience = finalExperience - experinceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      experinceToNextLevel,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge,\n      closeLevelUpModal\n    },\n    children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/tom/Documents/Projects/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","LevelUpModal","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","setIsLevelUpModalOpen","experinceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","console","log","closeLevelUpModal","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nimport challenges from \"../../challenges.json\";\nimport { LevelUpModal } from \"../components/LevelUpModal\";\n\ninterface Challenge {\n  type: \"body\" | \"eye\";\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n  experinceToNextLevel: number;\n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge: () => void;\n  completeChallenge: () => void;\n  closeLevelUpModal: () => void;\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode,\n  level: number,\n  currentExperience: number,\n  challengesCompleted: number,\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({\n  children,\n  ...rest\n}: ChallengesProviderProps) {\n  const [level, setLevel] = useState(rest.level ?? 1);\n  const [currentExperience, setCurrentExperience] = useState(\n    rest.currentExperience ?? 0\n  );\n  const [challengesCompleted, setChallengesCompleted] = useState(\n    rest.challengesCompleted ?? 0\n  );\n\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false);\n\n  const experinceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  useEffect(() => {\n    Cookies.set(\"level\", String(level));\n    Cookies.set(\"currentExperience\", String(currentExperience));\n    Cookies.set(\"challengesCompleted\", String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n    console.log(isLevelUpModalOpen);\n    setIsLevelUpModalOpen(true);\n    console.log(isLevelUpModalOpen);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n\n    setActiveChallenge(challenge);\n\n    new Audio(\"/notification.mp3\").play();\n\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Novo desafio o/\", {\n        body: `Valendo ${challenge.amount} xp!`,\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const { amount } = activeChallenge;\n\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experinceToNextLevel) {\n      finalExperience = finalExperience - experinceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        currentExperience,\n        challengesCompleted,\n        levelUp,\n        experinceToNextLevel,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge,\n        completeChallenge,\n        closeLevelUpModal,\n      }}\n    >\n      {children}\n\n      {isLevelUpModalOpen && <LevelUpModal />}\n    </ChallengesContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}