{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tom/Documents/Projects/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experinceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n  useEffect(function () {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio \\o/', {\n        body: \"Valendo \".concat(challenge.amount, \" xp!\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experinceToNextLevel) {\n      finalExperience = finalExperience - experinceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      experinceToNextLevel: experinceToNextLevel,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"POCod5lVJzLDZnxgMknXr3PjRHI=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/tom/Documents/Projects/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experinceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n    type: 'body' | 'eye',\n    description: string,\n    amount: number,\n}\n\ninterface ChallengesContextData {\n    level: number,\n    currentExperience: number,\n    challengesCompleted: number,\n    experinceToNextLevel: number,\n    activeChallenge: Challenge;\n    levelUp: () => void,\n    startNewChallenge: () => void,\n    resetChallenge: () => void,\n    completeChallenge: () => void,\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\ninterface HomeProps {\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider ({ children }:ChallengesProviderProps){\n\n    const [level, setLevel] = useState(1);\n    const [currentExperience, setCurrentExperience] = useState(0);\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n    const [activeChallenge, setActiveChallenge] = useState(null);\n\n    const experinceToNextLevel = Math.pow(( level + 1 ) * 4, 2)\n\n    useEffect(() => {\n        Notification.requestPermission();\n    }, []);\n\n    useEffect(()=>{\n        Cookies.set('level', String(level));\n        Cookies.set('currentExperience', String(currentExperience));\n        Cookies.set('challengesCompleted', String(challengesCompleted))\n    }, [level, currentExperience, challengesCompleted]);\n\n    function levelUp() {\n        setLevel(level + 1);\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge);\n\n        new Audio('/notification.mp3').play();\n\n        if (Notification.permission === 'granted') {\n            new Notification('Novo desafio \\o/', {\n                body: `Valendo ${challenge.amount} xp!`\n            });\n        }\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null);\n    }\n\n    function completeChallenge () {\n        if (!activeChallenge) {\n            return;\n        }\n\n        const {amount} = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if (finalExperience >= experinceToNextLevel) {\n            finalExperience = finalExperience - experinceToNextLevel;\n            levelUp();\n        }\n\n        setCurrentExperience(finalExperience);\n        setActiveChallenge(null);\n        setChallengesCompleted(challengesCompleted + 1);\n    }\n\n    return (\n        <ChallengesContext.Provider\n            value={{\n                level,\n                currentExperience,\n                challengesCompleted,\n                levelUp,\n                experinceToNextLevel,\n                startNewChallenge,\n                activeChallenge,\n                resetChallenge,\n                completeChallenge,\n            }}\n        >\n            {children}\n        </ChallengesContext.Provider>\n           )\n}\n"]},"metadata":{},"sourceType":"module"}