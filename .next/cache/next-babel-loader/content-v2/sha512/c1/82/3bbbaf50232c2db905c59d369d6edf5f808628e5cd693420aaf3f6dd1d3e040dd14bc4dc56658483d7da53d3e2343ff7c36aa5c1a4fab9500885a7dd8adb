{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/tom/Documents/Projects/moveit-next/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experinceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experinceToNextLevel) {\n      finalExperience = finalExperience - experinceToNextLevel;\n      levelUp();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      experinceToNextLevel,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/tom/Documents/Projects/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experinceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAAkE;AAErE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,oBAAoB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAEV,KAAK,GAAG,CAAV,IAAgB,CAAzB,EAA4B,CAA5B,CAA7B;;AAEA,WAASW,OAAT,GAAmB;AACfV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASY,iBAAT,GAA6B;AACzB,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAA0B;AACtBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA8B;AAC1B,QAAI,CAACb,eAAL,EAAsB;AAClB;AACH;;AAED,UAAM;AAACc,MAAAA;AAAD,QAAWd,eAAjB;AAEA,QAAIe,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C;;AAEA,QAAIC,eAAe,IAAIb,oBAAvB,EAA6C;AACzCa,MAAAA,eAAe,GAAGA,eAAe,GAAGb,oBAApC;AACAG,MAAAA,OAAO;AACV;AACJ;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAE;AACHX,MAAAA,KADG;AAEHE,MAAAA,iBAFG;AAGHE,MAAAA,mBAHG;AAIHO,MAAAA,OAJG;AAKHH,MAAAA,oBALG;AAMHI,MAAAA,iBANG;AAOHN,MAAAA,eAPG;AAQHY,MAAAA,cARG;AASHC,MAAAA;AATG,KADX;AAAA,cAaKpB;AAbL;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n    type: 'body' | 'eye',\n    description: string,\n    amount: number,\n}\n\ninterface ChallengesContextData {\n    level: number,\n    currentExperience: number,\n    challengesCompleted: number,\n    experinceToNextLevel: number,\n    activeChallenge: Challenge;\n    levelUp: () => void,\n    startNewChallenge: () => void,\n    resetChallenge: () => void,\n    completeChallenge: () => void,\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider ({ children }:ChallengesProviderProps){\n\n    const [level, setLevel] = useState(1);\n    const [currentExperience, setCurrentExperience] = useState(0);\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n    const [activeChallenge, setActiveChallenge] = useState(null);\n\n    const experinceToNextLevel = Math.pow(( level + 1 ) * 4, 2)\n\n    function levelUp() {\n        setLevel(level + 1);\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge);\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null);\n    }\n\n    function completeChallenge () {\n        if (!activeChallenge) {\n            return;\n        }\n\n        const {amount} = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if (finalExperience >= experinceToNextLevel) {\n            finalExperience = finalExperience - experinceToNextLevel;\n            levelUp();\n        }\n    }\n\n    return (\n        <ChallengesContext.Provider\n            value={{\n                level,\n                currentExperience,\n                challengesCompleted,\n                levelUp,\n                experinceToNextLevel,\n                startNewChallenge,\n                activeChallenge,\n                resetChallenge,\n                completeChallenge,\n            }}\n        >\n            {children}\n        </ChallengesContext.Provider>\n           )\n}\n"]},"metadata":{},"sourceType":"module"}